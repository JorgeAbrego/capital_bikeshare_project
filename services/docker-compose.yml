version: '3.8'

# Airflow configuration for local development
x-airflow-common:
  &airflow-common
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:slim-2.8.2-python3.10}
  build:
    context: .
    dockerfile: airflow.Dockerfile
  image: ${AIRFLOW_IMAGE_NAME}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/service-account-file.json
    PROJECT_ID: ${GCP_PROJECT_ID}
    BUCKET_NAME: ${GCP_BUCKET_NAME}
    DATASET_NAME: ${GCP_BIGUERY_DATASET}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${GCP_SA_KEY}:/opt/airflow/keys/service-account-file.json
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  ###########################################################################################################
  # Main Postgres server
  ###########################################################################################################
  postgres:
    image: postgres:15-alpine
    container_name: postgres_server
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "vlady" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
  
  ###########################################################################################################
  # PgAdmin Client
  ###########################################################################################################
  pgadmin:
    image: dpage/pgadmin4:8.3
    container_name: pgadmin_client
    restart: always
    env_file:
      - .env
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - 8888:80
    depends_on:
      - postgres

  ###########################################################################################################
  # Airflow Webserver
  ###########################################################################################################
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    #command: webserver
    command: >
      bash -c "/opt/airflow/create_airflow_connections.sh &&
      exec /entrypoint airflow webserver"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  ###########################################################################################################
  # Airflow Scheduler
  ###########################################################################################################
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  ###########################################################################################################
  # Airflow Init Service
  ###########################################################################################################
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  ###########################################################################################################
  # Airflow Cli
  ###########################################################################################################
  airflow-cli:
    <<: *airflow-common
    container_name: airflow_cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  ###########################################################################################################
  # dbt project
  ###########################################################################################################
  dbt-bg:
    build:
        context: .
        dockerfile: dbt.Dockerfile
        target: dbt-bigquery
    image: dbt-bigquery:v1
    container_name: dbt_env
    environment:
      GOOGLE_CLOUD_PROJECT: ${GCP_PROJECT_ID}
      PROJECT_ID: ${GCP_PROJECT_ID}
      BIGQUERY_DATASET: ${GCP_BIGUERY_DATASET}
    env_file:
      - .env
    volumes:
      - ${DBT_PROJ_DIR}:/usr/app
      - ${DBT_CONFIG_PATH}:/root/.dbt/
      - ${GCP_SA_KEY}:/root/.google/credentials/google_credentials.json

  ###########################################################################################################
  # dbt project
  ###########################################################################################################
  docker-proxy:
    build:
        context: .
        dockerfile: dockerSocat.Dockerfile
    image: docker-socat:v1
    container_name: docker-proxy
    environment:
      PROJECT_ID: ${GCP_PROJECT_ID}
      BIGQUERY_DATASET: ${GCP_BIGUERY_DATASET}
    command: "TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock"
    ports:
      - "2376:2375"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DBT_PROJ_DIR}:/dbt/projects
      - ${DBT_CONFIG_PATH}:/dbt/config
      #- ${GCP_SA_KEY}:/dbt/keys/google_credentials.json

volumes:
  postgres_data:
  pgadmin_data: